## 配置对应的数据库驱动
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/userlogin?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true
    username: root
    password: liuzijiang1314
    ##这样就不会使用Springboot默认的连接池Hikari。
    type: com.alibaba.druid.pool.DruidDataSource

    # 虽然我们配置了druid连接池的其它属性，但是不会生效。因为默认是使用的java.sql.Datasource的类来获取属性的，有些属性datasource没有。如果我们想让配置生效，需要手动创建Druid的配置文件。
    # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时（缺省值：0）
    initialSize: 5
    # 最小链接池数量
    minIdle: 5
    # 最大连接池数量（缺省值：8）
    maxActive: 20
    # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
    maxWait: 60000
    # 1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 400000
    # 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
    validationQuery: SELECT 1 FROM DUAL
    # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    testWhileIdle: true
    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnBorrow: false
    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    testOnReturn: false
    # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。(缺省值：false)
    poolPreparedStatements: true
    # 配置监控统计拦截的 filters，去掉后监控界面 sql 无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
    useGlobalDataSourceStat: true
    # 通过 connection-properties 属性打开 mergeSql 功能；慢 SQL 记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500


mybatis:
  mapper-locations: classpath:Mapper-XML/*Mapper.xml
  #扫描pojo包，给包下所有pojo对象起别名
  type-aliases-package: com.king2.userlogin.entity
  configuration:
    #开启驼峰命名 数据库字段 如：user_name===userNname
    #如果不配置就一定要是 user_name(数据库字段)===user_name(实体字段)
    map-underscore-to-camel-case: true


##配置分页插件
pagehelper:

  #分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum<=0 时会查询第一页，
  #pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。
  reasonable: true

  #supportMethodsArguments：支持通过 Mapper 接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，
  #自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页
  support-methods-arguments: true

  #params：为了支持startPage(Object params)方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值，
  #可以配置 pageNum,pageSize,count,pageSizeZero,reasonable，不配置映射的用默认值，
  #默认值为pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero
  params:count: countSql

  #分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分
  helper-dialect: mysql

## 显示sql语句
logging:
  level:
    com:
      king2:
        serlogin:
          mapper: DEBUG

